@fundAction

Feature: Transaction grid New Meta

@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction details of specific date and ofperspective
#Example:And I open transaction details of "05/09/17 Projected Balance - STANDARD" and "HDF:AUD:HDFAUDAC1"
#---------------------------------------------------------------------------------------------------
Scenario: I open transaction details of "<dateIs>" and "<ofperspective>"
  And I wait 10 seconds
  And I get column id for "$<dateIs>"
  And I scroll to ladder column "${columnId}"
  And result is defined by javascript
  """
  (function() {
   var rowIndex="";var columnIndex=""; resultIs="";
     $('.ag-pinned-left-cols-container [role="row"]').each(function(){
  		if($(this).text()=="$<ofperspective>".replace(/:/g,"")){
  			rowIndex=$(this).attr('row-index');
  	       }
      });
  	if(rowIndex!=""){
  		$('[row-index="'+rowIndex+'"]>[col-id*="${columnId}"').click();
  		resultIs="Done";
  	}
   return resultIs;
  })();
  """
  And result should be "Done"
  And I wait for page to load
  And transactionGrid should be displayed
  And I scroll to first column of ladder
  And I scroll to the bottom of transactionGrid
  And I wait for page to load

@StepDef
##############################################################
#-------------------------------------------------------------
#Step to get transaction details of specific date and currency
#Example:And I extract transaction excel for "<testcaseNo>"
#-------------------------------------------------------------
Scenario: I extract transaction excel for "<testcaseNo>"
  And I wait 2 seconds
  And I wait for transactionGrid text
   And I scroll to top of page
  And modulepresent is defined by javascript "(function() {return "${moduleName}" == "amendCancel"})();"
  And I sort ascending "Load Time" if modulepresent
  And moduleNewpresent is defined by javascript "(function() {return "${moduleName}" != "amendCancel"})();"
  And I sort ascending "Transaction Reference" if moduleNewpresent
  And I verify extract transaction excel for "$<testcaseNo>"

@StepDef
##############################################################
#-------------------------------------------------------------
#Step to get transaction details of specific date and currency
#Example:And I verify extract transaction excel for "<testcaseNo>"
#-------------------------------------------------------------
Scenario:I verify extract transaction excel for "<testcaseNo>"
  And I scroll to the bottom of transactionGrid
  And I wait for first row of TransactionGrid
  And I right click first row of TransactionGrid
  And I wait for export button
  And I click export button
  And export to csv button should be displayed
  And export to excel button should be displayed
  And dropdownList is defined by javascript "(function(){return $('.ag-menu').length})()"
  And dropdownList should be "2"
  And I click export to excel button
  And I execute system process "java  -DfileName="${baseDirectory}data\${moduleName}\actual\$<testcaseNo>.xls" -DbrowserName=${gwen.web.browser} -jar C:\QaAutomation\Utilities\exportToCsv.jar"
  And I execute system process "${baseDirectory}bat\compareResult.bat "${moduleName}" "$<testcaseNo>" "${moduleName}" "${moduleName}" "${baseDirectory}data""
  And compareResult is defined by system process "${baseDirectory}bat\result.bat"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcasesno "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"

@StepDef
##############################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I open transaction history details for transaction with "Transaction Reference" "BVKDFD213"
#---------------------------------------------------------------------------------------------------
Scenario: I open transaction history details for transaction with "<columnIs>" "<valueIs>"
  And I scroll to the top of transactionGrid
  And selected reference history can be located by javascript
  """
  (function(){
	var rowIndex="";var colId="";
  $('stl-ladder-transaction-grid .ag-header-container .ag-header-cell span.ag-header-cell-text').filter(function()
  {
   if($(this).text().trim()=="$<columnIs>")
   {
   $(this).parents().filter(function()
     {
     if($(this).attr('col-id')!=null)
       {
         colId=$(this).attr('col-id')
       }
     }
   )}
 })
    $('stl-ladder-transaction-grid [class*="ag-body-viewport"] [role="row"]').each(function(index){
    	if($(this).find("div[col-id*='"+colId+"']").text().trim()=="$<valueIs>")
        rowIndex=$(this).attr('row-index');
  })
	  return $('stl-ladder-transaction-grid [row-index="'+rowIndex+'"] div[col-id*="'+colId+'"]').get(0);
    })()
  """
  And I click selected reference history
  And I wait for transactionHistoryGrid text
  And transactionHistoryGrid should be displayed
  And I scroll to the bottom of transactionHistoryGrid
  And I wait for page to load

@StepDef
#######################################################################################
#--------------------------------------------------------------------------------------
#Sort  on transaction history
#--------------------------------------------------------------------------------------
Scenario: I sort ascending on transaction history ladder for "<columnName>"
   And I scroll to top of page
  And columnName is "$<columnName>"
  And multipleGrouping is defined by javascript "(function() {return "${columnName}".indexOf(',')>0})();"
  And I execute javascript "priorityCount=0"
  And I perform sort ascending on transaction history ladder for "${columnNameTo}" for each columnNameTo in columnName delimited by ","
  ##WA##And I verify priority count on transaction history ladder for "${columnNameTo}" for each columnNameTo in columnName delimited by "," if multipleGrouping

@StepDef
Scenario: I perform sort ascending on transaction history ladder for "<perspective>"
  And isLoadTime is defined by javascript "(function() {return "$<perspective>"=="Load Time"})()"
  And I scroll to transaction history ladder column "$<perspective>" if isLoadTime
  And unsorted is defined by javascript "$('stl-ladder-historic-transaction-grid span:contains("$<perspective>")').siblings('[ref="eSortAsc"]').hasClass( "ag-hidden")"
  And sortOption can be located by javascript "$('stl-ladder-historic-transaction-grid span:contains("$<perspective>").ag-header-cell-text').get(0)"
  And I SHIFT click sortOption while unsorted using 1 second delay
  And I scroll to first column of transaction history ladder

@StepDef
#######################################################################################
#--------------------------------------------------------------------------------------
#Remove Sort  on transaction history
#--------------------------------------------------------------------------------------
Scenario: I remove sort on transaction history ladder for "<columnName>"
   And I scroll to top of page
  And columnName is "$<columnName>"
  And multipleGrouping is defined by javascript "(function() {return "${columnName}".indexOf(',')>0})();"
  And I perform remove sort action on transaction history ladder for "${columnNameTo}" for each columnNameTo in columnName delimited by ","


@StepDef
Scenario: I perform remove sort action on transaction history ladder for "<perspective>"
  And isLoadTime is defined by javascript "(function() {return "$<perspective>"=="Load Time"})()"
  And I scroll to transaction history ladder column "$<perspective>" if isLoadTime
  And sorted is defined by javascript "!($('stl-ladder-historic-transaction-grid span:contains("$<perspective>")').siblings('[ref="eSortDesc"]').hasClass( "ag-hidden") && $('stl-ladder-historic-transaction-grid span:contains("$<perspective>")').siblings('[ref="eSortAsc"]').hasClass( "ag-hidden"))"
  And sortRemoveOption can be located by javascript "$('stl-ladder-historic-transaction-grid span:contains("$<perspective>").ag-header-cell-text').get(0)"
  And I SHIFT click sortRemoveOption while sorted using 1 second delay
  And I scroll to first column of transaction history ladder

@StepDef
#######################################################################################
#--------------------------------------------------------------------------------------
#Sort  on transaction grid
#--------------------------------------------------------------------------------------
Scenario: I sort ascending on transaction ladder for "<columnName>"
   And I scroll to top of page
  And columnName is "$<columnName>"
  And multipleGrouping is defined by javascript "(function() {return "${columnName}".indexOf(',')>0})();"
  And I execute javascript "priorityCount=0"
  And I perform sort ascending on transaction ladder for "${columnNameTo}" for each columnNameTo in columnName delimited by ","
  ##WA##And I verify priority count on transaction ladder for "${columnNameTo}" for each columnNameTo in columnName delimited by "," if multipleGrouping

@StepDef
Scenario: I perform sort ascending on transaction ladder for "<perspective>"
  And I scroll to transaction ladder column "$<perspective>"
  And unsorted is defined by javascript "$('stl-ladder-transaction-grid span:contains("$<perspective>")').siblings('[ref="eSortAsc"]').hasClass( "ag-hidden")"
  And sortOption can be located by javascript "$('stl-ladder-transaction-grid span:contains("$<perspective>").ag-header-cell-text').get(0)"
  And I SHIFT click sortOption while unsorted using 1 second delay
  And I scroll to first column of transaction ladder

@StepDef
#######################################################################################
#--------------------------------------------------------------------------------------
#Remove grouping  on transaction
#--------------------------------------------------------------------------------------
Scenario: I remove sort on transaction ladder for "<columnName>"
   And I scroll to top of page
  And columnName is "$<columnName>"
  And multipleGrouping is defined by javascript "(function() {return "${columnName}".indexOf(',')>0})();"
  And I perform remove sort action on transaction ladder for "${columnNameTo}" for each columnNameTo in columnName delimited by ","


@StepDef
Scenario: I perform remove sort action on transaction ladder for "<perspective>"
  And I scroll to transaction ladder column "$<perspective>"
  And sorted is defined by javascript "!($('stl-ladder-transaction-grid span:contains("$<perspective>")').siblings('[ref="eSortDesc"]').hasClass( "ag-hidden") && $('stl-ladder-historic-transaction-grid span:contains("$<perspective>")').siblings('[ref="eSortAsc"]').hasClass( "ag-hidden"))"
  And sortRemoveOption can be located by javascript "$('stl-ladder-transaction-grid span:contains("$<perspective>").ag-header-cell-text').get(0)"
  And I SHIFT click sortRemoveOption while sorted using 1 second delay
  And I scroll to first column of transaction ladder

@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I get transaction history details
#---------------------------------------------------------------------------------------------------
Scenario: I extract transaction history excel for "<testcaseNo>"
  And I scroll to the bottom of transactionHistoryGrid
  And modulepresent is defined by javascript "(function() {return "${moduleName}" == "amendCancel"})();"
  And I sort ascending on transaction history ladder for "Load Time" if modulepresent
  And moduleNewpresent is defined by javascript "(function() {return "${moduleName}" != "amendCancel"})();"
  And I sort ascending on transaction history ladder for "Transaction Reference" if moduleNewpresent
  And I verify extract transaction history excel for "$<testcaseNo>"

@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I get transaction history details
#---------------------------------------------------------------------------------------------------
Scenario: I verify extract transaction history excel for "<testcaseNo>"
  And I scroll to the bottom of transactionHistoryGrid
  And I wait for first row of transactionHistoryGrid
  And I right click first row of transactionHistoryGrid
  And I wait for export button
  And I click export button
  And export to csv button should be displayed
  And export to excel button should be displayed
  And dropdownList is defined by javascript "(function(){return $('.ag-menu').length})()"
  And dropdownList should be "2"
  And I click export to excel button
  And I execute system process "java  -DfileName="${baseDirectory}data\${moduleName}\actual\$<testcaseNo>.xls" -DbrowserName=${gwen.web.browser} -jar C:\QaAutomation\Utilities\exportToCsv.jar"
  And I execute system process "${baseDirectory}bat\compareResult.bat "${moduleName}" "$<testcaseNo>" "${moduleName}" "${moduleName}" "${baseDirectory}data""
  And compareResult is defined by system process "${baseDirectory}bat\result.bat"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcasesno "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"


@StepDef
###############################################
#----------------------------------------------
#Step to extract transaction ladder data by scrolling on UI
#----------------------------------------------
Scenario: I get the transaction ladder data from UI
And the result is defined by javascript
"""
(function setTimeout () {
var rowCount = $('stl-ladder-transaction-grid .ag-body-viewport > .ag-body-container > [role="row"]').length
	var columnCount = $('stl-ladder-transaction-grid [class="ag-header-container"] [class="ag-header-cell-label"]').length
	 y = [];failedNegativeCheck=[];
	var fixedheaderCount = $('stl-ladder-transaction-grid .ag-pinned-left-header [class="ag-header-cell-label"]').length
	 x = [];n=[];
   $('stl-ladder-transaction-grid [class="ag-header-cell-label"]').each(function(){console.log($(this).text());x.push($( this ).text().trim())})
   $('stl-ladder-transaction-grid [class="ag-header-cell ag-header-cell-sortable"]').each(function(){console.log($(this).attr("col-id").trim().replace(/  /g,""));n.push($( this ).attr("col-id").trim().replace(/  /g,""))});
		y.push(x);


		for (i = 1; i <= rowCount; i++) {
				x = [];
				for(k = 1; k<= fixedheaderCount; k++) {
				console.log('fhc :'+$('stl-ladder-transaction-grid [class="ag-pinned-left-cols-container"] [role="row"]:nth-child('+i+') [role="gridcell"]:nth-child('+k+')').text())
				x.push($('stl-ladder-transaction-grid [class="ag-pinned-left-cols-container"] [role="row"]:nth-child('+i+') [role="gridcell"]:nth-child('+k+')').text().trim());
				}
				for(c in n) {
        	   console.log($('stl-ladder-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text());
              				x.push($('stl-ladder-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text());
                      if(n[c]=="Amount")
                      if ($('stl-ladder-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text().trim().indexOf("-") >= 0)
                        if ($('stl-ladder-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').css('color') != "rgb(255, 0, 0)")
                          failedNegativeCheck.push($( this ).text().trim());
            };
				    if(x[1]!=""||x[0]!=""||x[2]!=""||x[3]!=""){console.log("yes");y.push(x)}
            if(failedNegativeCheck.length==0)
			             result = "Done";
			}

	return result;
	})();
  """
  Then the result should be "Done"
  And I execute javascript
  """
  (function(){offset=$('stl-ladder-transaction-grid [class="ag-header-cell-label"]').offset()
  offset.left += 2000;
  offset.top -= 100;
  $('stl-ladder-transaction-grid [class*="ag-body-viewport"]').animate({
      scrollLeft: offset.left
  });})()
  """
  And I wait 10 seconds


@StepDef
##############################################################
#-------------------------------------------------------------
#Step to extract balances from transaction ladder grid
#-------------------------------------------------------------
Scenario: I extracts balances of transaction ladder grid
  And I wait 3 seconds
  And I execute javascript "repeat=1"
  And takeExtract is defined by javascript "(function(){ console.log(repeat); return repeat!=0 })()"
  And I extracts balances from transaction ladder grid while takeExtract using 1000 millisecond delay and 10 minute timeout
  And I execute javascript
  """
  offset.left -= 100000;
  offset.top -= 200;
  $('stl-ladder-transaction-grid [class*="ag-body-viewport"]').animate({
      scrollLeft: offset.left
  });
  """

  @StepDef
  Scenario: I extracts balances from transaction ladder grid

    And the executionResult is defined by javascript
    """
    (function(){
      var str="";
      function getData() {
      console.log("ada");
      var rowCount = $('stl-ladder-transaction-grid .ag-body-viewport > .ag-body-container > [role="row"]').length
	    var columnCount = $('stl-ladder-transaction-grid [class="ag-header-container"] [class="ag-header-cell-label"]').length;
	    var fixedheaderCount = $('stl-ladder-transaction-grid .ag-pinned-left-header [class="ag-header-cell-label"]').length;
		  x = [];n=[];failedNegativeCheck=[];
          duplicate = 0;
          for (i = 1; i <=1; i++) {
  		 console.log("i is ", i);
     $('stl-ladder-transaction-grid [class="ag-header-cell-label"]').each(function(){console.log($(this).text());x.push($( this ).text().trim())})
     $('stl-ladder-transaction-grid .ag-header-cell').each(function(){console.log($(this).attr("col-id").trim().replace(/  /g,""));n.push($( this ).attr("col-id").trim().replace(/  /g,""))});
			for(c in n) {console.log(n[c])}
  			for(l=0;l<x.length;l++)
  				{  if (y[0].indexOf(x[l]) >= 0) { duplicate++ };if (y[0].indexOf(x[l]) < 0) { y[0].push(x[l]) } }
  		}


          for (i = 1; i <= rowCount; i++) {
              x = [];m=[];
              for(c in n) {
              				x.push($('stl-ladder-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text());
                      if(n[c]=="Amount")
                      if ($('stl-ladder-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text().trim().indexOf("-") >= 0)
                        if ($('stl-ladder-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').css('color') != "rgb(255, 0, 0)")
                          failedNegativeCheck.push($( this ).text().trim());

            };
            console.log("row is---->"+x);
             x.splice(0, duplicate); repeat = x.length;
             console.log("Duplicate------>:"+duplicate+"repeat"+repeat);
             if (x.length > 0) {
			          console.log("test ------>x"+x);
             for(b in x) { y[i].push(x[b]) }
             }
			          }
            };
            if(failedNegativeCheck.length==0)
            str = "Done";
          getData()
       return str;
      })();
    """
    And the executionResult should be "Done"
    Then I execute javascript
      """
      (function(){
      offset.left += 800;
      offset.top -= 200;
      $('stl-ladder-transaction-grid [class*="ag-body-viewport"]').animate({
          scrollLeft: offset.left
      });})()
      """
      And I wait 5 seconds

@StepDef
##############################################################
#-------------------------------------------------------------
#Step to combine results
# EXAMPLE: And I extract total transaction ladder balance data
#-------------------------------------------------------------
Scenario:  I extract total transaction ladder balance data
  And I execute javascript "$('stl-ladder-transaction-grid [ref="btNext"]').click()"
  And I wait 5 seconds
   And I get the transaction ladder data from UI
   And I extracts balances of transaction ladder grid
   And I execute javascript "z.push(y)"
   And I execute javascript
   """
     (function(){
     function swap(input, index_A, index_B) {
     var temp = input[index_A];
     input[index_A] = input[index_B];
     input[index_B] = temp;
     }
     for(i in z[0][0]) {console.log(z[0][0][i]) ;console.log(y[0].indexOf(z[0][0][i]));index=y[0].indexOf(z[0][0][i]); for( j in y)
     {console.log(y[j][index]); console.log(index+"and"+i);swap(y[j],index,i)} }
     })()
  """
  And I execute javascript
  """
  offset.left -= 100000;
  offset.top -= 200;
  $('stl-ladder-transaction-grid [class*="ag-body-viewport"]').animate({
      scrollLeft: offset.left
  });
  """
  ##WA##And I execute javascript "z.push(y)"



@StepDef
##############################################################
#-------------------------------------------------------------
#Step to combine results
# EXAMPLE: And I verify transaction ladder result for "test1"
#-------------------------------------------------------------
Scenario:  I verify transaction ladder result for "<testcase>"
  And I wait for first row of TransactionGrid
  And I scroll to the bottom of first row of TransactionGrid
   And I wait for first row of TransactionGrid
  And I execute javascript "z=[]"
  And I get the transaction ladder data from UI
  And I extracts balances of transaction ladder grid
  And I execute javascript "z.push(y)"
  Then I verify execution results for "$<testcase>"


@StepDef
###############################################
#----------------------------------------------
#Step to extract transaction history ladder data by scrolling on UI
#----------------------------------------------
Scenario: I get the transaction history ladder data from UI
  And the result is defined by javascript
  """
  (function setTimeout () {
  var rowCount = $('stl-ladder-historic-transaction-grid .ag-body-viewport > .ag-body-container > [role="row"]').length
    var columnCount = $('stl-ladder-historic-transaction-grid [class="ag-header-container"] [class="ag-header-cell-label"]').length
     y = [];failedNegativeCheck=[];
    var fixedheaderCount = $('stl-ladder-historic-transaction-grid .ag-pinned-left-header [class="ag-header-cell-label"]').length
     x = [];n=[];
    $('stl-ladder-historic-transaction-grid [class="ag-header-cell-label"]').each(function(){console.log("-"+$(this).text());x.push($( this ).text().trim())})
   $('stl-ladder-historic-transaction-grid [class="ag-header-cell ag-header-cell-sortable"]').each(function(){console.log("__"+$(this).attr("col-id").trim().replace(/  /g,""));n.push($( this ).attr("col-id").trim().replace(/  /g,""))});
         if(n.indexOf("transactionReference")<0) {n.splice(3, 0, "transactionReference");};
      y.push(x);
      for (i = 1; i <= rowCount; i++) {
          x = [];
          for(k = 1; k<= fixedheaderCount; k++) {
          console.log('fhc :'+$('stl-ladder-historic-transaction-grid [class="ag-pinned-left-cols-container"] [role="row"]:nth-child('+i+') [role="gridcell"]:nth-child('+k+')').text())
          x.push($('stl-ladder-historic-transaction-grid [class="ag-pinned-left-cols-container"] [role="row"]:nth-child('+i+') [role="gridcell"]:nth-child('+k+')').text().trim());
          }

          for(c in n) {
               console.log($('stl-ladder-historic-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text());
                        x.push($('stl-ladder-historic-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text());
                        if(n[c]=="Amount")
                        if ($('stl-ladder-historic-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text().trim().indexOf("-") >= 0)
                          if ($('stl-ladder-historic-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').css('color') != "rgb(255, 0, 0)")
                            failedNegativeCheck.push($( this ).text().trim());
              };
              if(x[1]!=""||x[0]!=""||x[2]!=""||x[3]!=""){console.log("yes");y.push(x)}
              if(failedNegativeCheck.length==0)
                     result = "Done";
        }

    return result;
    })();
    """
    Then the result should be "Done"
  And I execute javascript
  """
  (function(){offset=$('stl-ladder-historic-transaction-grid [class="ag-header-cell-label"]').offset()
  offset.left += 2000;
  offset.top -= 100;
  $('stl-ladder-historic-transaction-grid [class*="ag-body-viewport"]').animate({
      scrollLeft: offset.left
  });})()
  """
  And I wait 10 seconds


@StepDef
##############################################################
#-------------------------------------------------------------
#Step to extract balances from transaction history ladder grid
#-------------------------------------------------------------
Scenario: I extracts balances of transaction history ladder grid
  And I wait 3 seconds
  And I execute javascript "repeat=1"
  And takeExtract is defined by javascript "(function(){ console.log(repeat); return repeat!=0 })()"
  And I extracts balances from transaction history ladder grid while takeExtract using 1000 millisecond delay and 10 minute timeout
  And I execute javascript
  """
  offset.left -= 100000;
  offset.top -= 100;
  $('stl-ladder-historic-transaction-grid [class*="ag-body-viewport"]').animate({
      scrollLeft: offset.left
  });
  """

@StepDef
Scenario: I extracts balances from transaction history ladder grid

  And the executionResult is defined by javascript
  """
  (function(){
    var str="";
    function getData() {
    console.log("ada");
    var rowCount = $('stl-ladder-historic-transaction-grid .ag-body-viewport > .ag-body-container > [role="row"]').length
    var columnCount = $('stl-ladder-historic-transaction-grid [class="ag-header-container"] [class="ag-header-cell-label"]').length;
    var fixedheaderCount = $('stl-ladder-historic-transaction-grid .ag-pinned-left-header [class="ag-header-cell-label"]').length;
    x = [];n=[];failedNegativeCheck=[];
        duplicate = 0;
        for (i = 1; i <=1; i++) {
     console.log("i is ", i);
    $('stl-ladder-historic-transaction-grid [class="ag-header-cell-label"]').each(function(){console.log($(this).text());x.push($( this ).text().trim())})
    $('stl-ladder-historic-transaction-grid .ag-header-cell').each(function(index){console.log(index+" index is"+$(this).attr("col-id").trim().replace(/  /g,""));n.push($( this ).attr("col-id").trim().replace(/  /g,""))});
    for(c in n) {console.log(n[c])}
      for(l=0;l<x.length;l++)
        {  if (y[0].indexOf(x[l]) >= 0) { duplicate++ };if (y[0].indexOf(x[l]) < 0) { y[0].push(x[l]) } }
    }


        for (i = 1; i <= rowCount; i++) {
            x = [];m=[];
            for(c in n) {
                    x.push($('stl-ladder-historic-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text());
                    if(n[c]=="Amount")
                    if ($('stl-ladder-historic-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').text().trim().indexOf("-") >= 0)
                      if ($('stl-ladder-historic-transaction-grid [class*="ag-body-container"] [role="row"]:nth-child('+i+') [col-id="'+ n[c]+'"]').css('color') != "rgb(255, 0, 0)")
                        failedNegativeCheck.push($( this ).text().trim());

          };
          console.log("row is---->"+x);
           x.splice(0, duplicate); repeat = x.length;
           console.log("Duplicate------>:"+duplicate+"repeat"+repeat);
           if (x.length > 0) {
              console.log("test ------>x"+x);
           for(b in x) { y[i].push(x[b]) }
           }
              }
          };
          if(failedNegativeCheck.length==0)
          str = "Done";
        getData()
     return str;
    })();
  """
  And the executionResult should be "Done"
  Then I execute javascript
    """
    (function(){
    offset.left += 800;
    offset.top -= 100;
    $('stl-ladder-historic-transaction-grid [class*="ag-body-viewport"]').animate({
        scrollLeft: offset.left
    });})()
    """
    And I wait 5 seconds

@StepDef
##############################################################
#-------------------------------------------------------------
#Step to combine results
# EXAMPLE: And I extract total transaction history ladder balance data
#-------------------------------------------------------------
Scenario:  I extract total transaction history ladder balance data
  And I execute javascript "$('stl-ladder-historic-transaction-grid [ref="btNext"]').click()"
  And I wait 5 seconds
 And I get the transaction history ladder data from UI
 And I extracts balances of transaction history ladder grid
 And I execute javascript "z.push(y)"
 And I execute javascript
 """
   (function(){
   function swap(input, index_A, index_B) {
   var temp = input[index_A];
   input[index_A] = input[index_B];
   input[index_B] = temp;
   }
   for(i in z[0][0]) {console.log(z[0][0][i]) ;console.log(y[0].indexOf(z[0][0][i]));index=y[0].indexOf(z[0][0][i]); for( j in y)
   {console.log(y[j][index]); console.log(index+"and"+i);swap(y[j],index,i)} }
   })()
"""
And I execute javascript
"""
offset.left -= 100000;
offset.top -= 200;
$('stl-ladder-historic-transaction-grid [class*="ag-body-viewport"]').animate({
    scrollLeft: offset.left
});
"""
##WA##And I execute javascript "z.push(y)"



@StepDef
##############################################################
#-------------------------------------------------------------
#Step to combine results
# EXAMPLE: And I verify transaction history ladder result for "test1"
#-------------------------------------------------------------
Scenario:  I verify transaction history ladder result for "<testcase>"
And I wait for first row of transactionHistoryGrid
And I execute javascript "z=[]"
And I get the transaction history ladder data from UI
And I extracts balances of transaction history ladder grid
And I execute javascript "z.push(y)"
Then I verify execution results for "$<testcase>"



@StepDef
@DataTable(header="top")
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction details of specific transaction
#Example:And I get transaction history details
#---------------------------------------------------------------------------------------------------
Scenario: I verify balances from transaction ladder for transaction details of
  And I verify transaction details of "${data[ofdate]}" "${data[ofperspective]}" "${data[testcaseNo]}" "${data[filter]}" for each data record


@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to verify transaction details from transaction ladder
#---------------------------------------------------------------------------------------------------
Scenario: I verify transaction details of "<ofdate>" "<ofperspective>" "<testcaseNo>" "<filter>"
  And filterIs is "$<filter>"
  And I enter ladder filter "${selectFilter}" for each selectFilter in filterIs delimited by ";"
  And I open transaction details of "$<ofdate>" and "$<ofperspective>"
  And I wait 2 seconds
  And I wait for transactionGrid text
  And I wait for first row of TransactionGrid
  And I remove ladder filter "${selectFilter}" for each selectFilter in filterIs delimited by ";"
  And I scroll to the bottom of transactionGrid
  And I uncheck showAllTransactions
  And I extract transaction csv for "$<testcaseNo>"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcases "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"

@StepDef
#---------------------------------------------------------------------------------------------------
#Step to verify all transaction details from transaction ladder "<testcaseNo>"
#---------------------------------------------------------------------------------------------------
Scenario:I verify all transaction from transaction grid for testcase "<testcaseNo>"
  And I scroll to the bottom of transactionGrid
  And I check showAllTransactions
  And I wait 2 seconds
  And I extract transaction csv for "$<testcaseNo>"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcases "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"

@StepDef
#---------------------------------------------------------------------------------------------------
#Step to verify all transaction details from UI transaction ladder "<testcaseNo>"
#---------------------------------------------------------------------------------------------------
Scenario:I verify all transaction from UI transaction grid for testcase "<testcaseNo>"
  And I scroll to the bottom of transactionGrid
  And I check showAllTransactions
  And I wait 5 seconds
  And I verify transaction ladder result for "$<testcaseNo>"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcases "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"

@StepDef
@DataTable(header="top")
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to verify all transaction history from transaction ladder "<testcaseNo>"
#---------------------------------------------------------------------------------------------------
Scenario:I verify transaction history of transactions
  And I verify transaction history of transaction with transaction reference "${data[TransactionReference]}" for testcase "${data[testcaseNo]}" for each data record


@StepDef
#---------------------------------------------------------------------------------------------------
#Step to verify transaction history details from transaction ladder
#---------------------------------------------------------------------------------------------------
Scenario:I verify transaction history of transaction with transaction reference "<referenceNo>" for testcase "<testcaseNo>"
  And I open transaction history details for transaction with "Transaction Reference" "$<referenceNo>"
  And I wait for first row of transactionHistoryGrid
  And I extract transaction history csv for "$<testcaseNo>"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcases "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"

@StepDef
##############################################################
#-------------------------------------------------------------
#Step to get transaction details of specific date and currency
#Example:And I extract transaction csv for "<testcaseNo>"
#-------------------------------------------------------------
Scenario: I extract transaction csv for "<testcaseNo>"
  And I wait 2 seconds
  And I wait for transactionGrid text
   And I scroll to top of page
  And modulepresent is defined by javascript "(function() {return ("${moduleName}" == "amendCancel") || ("${moduleName}" == "bookingDate")})();"
  And I sort ascending on transaction ladder for "Load Time" if modulepresent
  And moduleNewpresent is defined by javascript "(function() {return ("${moduleName}" != "amendCancel") && ("${moduleName}" != "bookingDate")})();"
  And I sort ascending on transaction ladder for "Transaction Reference" if moduleNewpresent
  And I verify extract transaction csv for "$<testcaseNo>"

@StepDef
##############################################################
#-------------------------------------------------------------
#Step to get transaction details of specific date and currency
#Example:And I extract transaction csv for "<testcaseNo>"
#-------------------------------------------------------------
Scenario:I verify extract transaction csv for "<testcaseNo>"
  And I scroll to the bottom of transactionGrid
  And I wait for first row of TransactionGrid
  And I right click first row of TransactionGrid
  And I wait for export button
  And I click export button
  And export to csv button should be displayed
  And export to excel button should be displayed
  And dropdownList is defined by javascript "(function(){return $('.ag-menu').length})()"
  And dropdownList should be "2"
  And I click export to csv button
  And I save file using "," as delimiter with sort on "none" for "$<testcaseNo>"
  And I compare result for "$<testcaseNo>"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcasesno "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"

@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I get transaction history details
#---------------------------------------------------------------------------------------------------
Scenario: I extract transaction history csv for "<testcaseNo>"
  And I scroll to the bottom of transactionHistoryGrid
  And modulepresent is defined by javascript "(function() {return ("${moduleName}" == "amendCancel") || ("${moduleName}" == "bookingDate")})();"
  And I sort ascending on transaction history ladder for "Load Time" if modulepresent
  And moduleNewpresent is defined by javascript "(function() {return ("${moduleName}" != "amendCancel") && ("${moduleName}" != "bookingDate") && ("${moduleName}" != "ringfencingE2E")})();"
  And I sort ascending on transaction history ladder for "Transaction Reference" if moduleNewpresent
  And moduleRingFenced is defined by javascript "(function() {return ("${moduleName}" == "ringfencingE2E")})();"
  And I sort ascending on transaction history ladder for "Amount,Trade Type" if moduleRingFenced
  And I verify extract transaction history csv for "$<testcaseNo>"

@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I get transaction history details
#---------------------------------------------------------------------------------------------------
Scenario: I verify extract transaction history csv for "<testcaseNo>"
  And I scroll to the bottom of transactionHistoryGrid
  And I wait for first row of transactionHistoryGrid
  And I right click first row of transactionHistoryGrid
  And I wait for export button
  And I click export button
  And export to csv button should be displayed
  And export to excel button should be displayed
  And dropdownList is defined by javascript "(function(){return $('.ag-menu').length})()"
  And dropdownList should be "2"
  And I click export to csv button
  And I save file using "," as delimiter with sort on "none" for "$<testcaseNo>"
  And I compare result for "$<testcaseNo>"
  And testcaseIs is "$<testcaseNo>:''"
  And I verify testresult of testcasesno "${testcaseNoIs}" for each testcaseNoIs in testcaseIs delimited by ":"



@StepDef
@DataTable(header="top")
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction details of specific transaction
#Example:And I verify transaction grid exports
#---------------------------------------------------------------------------------------------------
Scenario: I verify transaction grid exports
  And I verify transaction grid exports of "${data[testCaseNo]}" "${data[transactionDate]}" "${data[transactionDetailsOf]}" for each data record

@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I get transaction history details
#---------------------------------------------------------------------------------------------------
Scenario: I verify transaction grid exports of "<testCaseNo>" "<transactionDate>" "<transactionDetailsOf>"
  And I scroll to top of page
  And I open transaction details of "$<transactionDate>" and "$<transactionDetailsOf>"
  And I check showAllTransactions
  And I extract transaction csv for "$<testCaseNo>"


@StepDef
@DataTable(header="top")
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I extract transaction history
#---------------------------------------------------------------------------------------------------
Scenario: I extract transaction history
  And I verify transaction history grid exports of "${data[testCaseNo]}" "${data[transactionDate]}" "${data[transactionDetailsOf]}" "${data[transactionReference]}" for each data record

@StepDef
####################################################################################################
#---------------------------------------------------------------------------------------------------
#Step to get transaction history details of specific transaction
#Example:And I get transaction history details
#---------------------------------------------------------------------------------------------------
Scenario: I verify transaction history grid exports of "<testCaseNo>" "<transactionDate>" "<transactionDetailsOf>" "<transactionReference>"
  And  I scroll to top of page
  And I open transaction details of "$<transactionDate>" and "$<transactionDetailsOf>"
  And I open transaction history details for transaction with "Transaction Reference" "$<transactionReference>"
  And I extract transaction history csv for "$<testCaseNo>"
